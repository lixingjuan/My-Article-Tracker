const demo = () => {
  console.log("执行demo");
  console.log(notExist);
  return "hello world";
};

/* ****************************************************************************************************
 *                                   ❌ 这种写法会让demo 在本轮事件末尾执行
 ************************************************************************************************* */
console.log("start");
Promise.resolve()
  .then(demo)
  .then((res) => console.log(res));
console.log("next");

/* ****************************************************************************************************
 *                                    ✅ 立即执行函数 + 实现try, async
 ************************************************************************************************* */
console.log("start");
(async () => demo())()
  .then((result) => {
    console.log(result);
  })
  .catch((err) => {
    console.log(err);
  });
console.log("next");

/* ****************************************************************************************************
 *                                    ✅ 立即执行函数 + new Promise
 ************************************************************************************************* */
console.log("start");
(() => new Promise((resolve, reject) => resolve(demo())))()
  .then((result) => {
    console.log(result);
  })
  .catch((err) => {
    console.log(err);
  });
console.log("next");

/* ****************************************************************************************************
 *                                     loading, 仍处于提案阶段
 ************************************************************************************************* */
Promise.try(demo).then((res) => {
  console.log(res);
});
