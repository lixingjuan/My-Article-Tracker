/* ****************************************************************************************************
 *     多态：给不同的对象发送同一个消息的时候，这些对象会根据这个消息，发出不同的反馈
 *
 * 举例：
 * 家里有不同的动物，当主人发出‘叫’ 这个命令后，鸭子会‘嘎嘎嘎’， 小鸡会‘咯咯咯’
 *
 * 代码实例⬇️
 ************************************************************************************************* */
const Duck = function () {};
const Chicken = function () {};
const makeSound = (animal) => {
  if (animal instanceof Duck) {
    console.log("嘎嘎嘎");
  } else if (animal instanceof Chicken) {
    console.log("咯咯咯");
  }
};

makeSound(new Duck());
makeSound(new Chicken());

/* ****************************************************************************************************
 *   多态的思想
 *
 *   多态背后的思想是将“做什么” 和 “谁去做以及怎样做” 分离开
 *   也就是将      “不变的事物”和 “可能改变的事物”   分离开
 *
 *   在⬆️上面的故事中，动物都会叫，这是不变的，但是不同的动物具体怎么样是可变的
 *   把不变的部分隔离出来，把可变的部分封装起来，这给予了我们扩展程序的English，程序看起来是“可生长的”，也是符合“开放-封闭原则”的
 *   相对于修改代码来说，仅增加代码就能完成同样的功能，显然优雅和安全得多
 *
 ************************************************************************************************* */

/* ****************************************************************************************************
 *                                    对象的多态性
 * 对上面的代码进行改写，
 * 把不变的部分隔离出来，那就是所有的动物都会叫
 * 然后把各自可变的部分各自封装起来
 *
 * 我们刚才谈的多态性实际上指的是对象的多态性
 ************************************************************************************************* */

const newMakeSound = (animal) => animal.sound();

const newDuck = function () {};
newDuck.prototype.sound = function () {
  console.log("嘎嘎嘎");
};
const newChilcken = function () {};
newChilcken.prototype.sound = function () {
  console.log("咯咯咯");
};

// 发出"sound"的命令
newMakeSound(new newDuck());
newMakeSound(new newChilcken());

// 动物园加入一只狗
const Dog = function () {};
Dog.prototype.sound = function () {
  console.log("汪汪汪");
};

newMakeSound(new Dog());
