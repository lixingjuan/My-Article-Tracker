/* ****************************************************************************************************
 *                                    实现bind
 ************************************************************************************************* */
Function.prototype.bind = function (context, ...args) {
  const _self = this;

  return function (...innerArgs) {
    // core-next-line
    return _self.apply(context, [...args, ...innerArgs]);
  };
};

// es6写法
Function.prototype.bindEs6 = function (context, ...args) {
  return (...innerArgs) => this.apply(context, [...args, ...innerArgs]);
};

const obj = {
  name: "seven",
};

/* ****************************************************************************************************
 *                                    直接调用
 ************************************************************************************************* */
let foo = function (a, b, c) {
  console.log(this.name);
  console.log({ a, b, c });
};

foo(1, 2, 3); // { a: 1, b: 2, c: 3 }

/* ****************************************************************************************************
 *                                    bind-固化一部分参数
 ************************************************************************************************* */

// 此处还未调用
// core-next-line
foo = foo.bindEs6(obj, 1);

foo(2, 3); // { a: 1, b: 2, c: 3 }
