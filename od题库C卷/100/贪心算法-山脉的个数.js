/**
 *
 * @题目描述
 * 山脉的个数(本题分值100)
 * 攀登者喜欢寻找各种地图，并且尝试攀登到最高的山峰。
 * 地图表示为一维数组，数组的索引代表水平位置，数组的元素代表相对海拔高度。其中数组元素0代表地面。
 *
 * 例如：[0,1,2,4,3,1,0,0,1,2,3,1,2,1,0]，地图中有两个山脉位置分别为 1,2,3,4,5 和 8,9,10,11,12,13，最高峰高度分别为 4,3。最高峰位置分别为3,10。
 *
 * 一个山脉可能有多座山峰(高度大于相邻位置的高度，或在地图边界且高度大于相邻的高度)。登山者想要知道一张地图中有多少座山峰。
 *
 * @输入描述
 * 输入为一个整型数组，数组长度大于1。
 *
 * @输出描述
 * 输出地图中山峰的数量
 *
 * @用例
 * 输入: [0,1,2,4,3,1,0,0,1,2,3,1,2,1,0]
 * 输出：3
 *
 * @用例
 * 输入: [0,2,1,0]
 * 输出: 1
 * 说明：存在一个山峰，最高点在索引1。

 * @用例
 * 输入: [1,2,0,2,0,2,1,0]
 * 输出: 3
 * 说明：存在三个山峰，最高点分别在索引1、3、5。

 * @用例
 * 输入: [0,1,0]
 * 输出: 1
 * 说明：存在一个山峰，最高点在索引1。

 * @用例
 * 输入: [3,2,1,0]
 * 输出: 1
 * 说明：存在一个山峰，最高点在索引0。

 * @用例
 * 输入: [0]
 * 输出: 0
 * 说明：只有一个元素且为地面，没有山峰。

 * @用例
 * 输入: [2,1,2]
 * 输出: 2
 * 说明：存在两个山峰，最高点分别在索引0和2。

 * @用例
 * 输入: [0,5,5,1,0,2,4,2,0]
 * 输出: 2
 * 说明：存在两个山峰，最高点分别在索引1（5被视为一个连续的高地，不计为两个山峰）和6。

 * @用例
 * 输入: [0,1,0,1,0,1,0]
 * 输出: 3
 * 说明：存在三个山峰，最高点分别在索引1、3、5。
 */

const rl = require("readline").createInterface({
  input: process.stdin,
  output: process.stdout,
});

rl.on("line", (line) => {
  const arr = JSON.parse(line);
  if (arr.length === 0) return 0;
  if (arr.length === 1) return arr[0] > 0;

  let count = 0;
  // 第一个元素，只要比后一个高， 就是山峰
  if (arr[0] > arr[1]) {
    count++;
  }

  // 只要比前后高，就是山峰
  for (let i = 1; i < arr.length - 1; i++) {
    const pre = arr[i - 1];
    const cur = arr[i];
    const next = arr[i + 1];
    if (cur > pre && cur > next) {
      count++;
    }
  }

  // 最后一个元素，只要比前一个高， 就是山峰
  if (arr.at(-1) > arr.at(-2)) {
    count++;
  }

  console.log(count);
  rl.close();
});
